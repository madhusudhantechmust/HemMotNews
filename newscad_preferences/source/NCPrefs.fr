//========================================================================================
//  
//  $File: $
//  
//  Owner: Ross Edgar
//  
//  $Author: $
//  
//  $DateTime: $
//  
//  $Revision: $
//  
//  $Change: $
//  
//  Copyright 1997-2008 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"

// General includes:
#include "MenuDef.fh"
#include "ActionDef.fh"
#include "ActionDefs.h"
#include "AdobeMenuPositions.h"
#include "LocaleIndex.h"
#include "PMLocaleIds.h"
#include "StringTable.fh"
#include "ObjectModelTypes.fh"
#include "ShuksanID.h"
#include "ActionID.h"
#include "CommandID.h"
#include "WorkspaceID.h"
#include "WidgetID.h"
#include "BuildNumber.h"

#include "InterfaceColorDefines.h"
#include "IControlViewDefs.h"
#include "SysControlIDs.h"
#include "Widgets.fh"	// for PalettePanelWidget or DialogBoss


// Project includes:
#include "NCPrefsID.h"
#include "GenericID.h"
#include "ShuksanID.h"
#include "TextID.h"


#ifdef __ODFRC__

/*  Plugin version definition.
*/
resource PluginVersion (kSDKDefPluginVersionResourceID)
{
	kTargetVersion,
	kNCPrefsPluginID,
	kSDKDefPlugInMajorVersionNumber, kSDKDefPlugInMinorVersionNumber,
	kSDKDefHostMajorVersionNumber, kSDKDefHostMinorVersionNumber,
	kNCPrefsCurrentMajorFormatNumber, kNCPrefsCurrentMinorFormatNumber,
	{ kInDesignProduct, kInCopyProduct},
	{ kWildFS },
	kNCPrefsVersion
};

/*  The ExtraPluginInfo resource adds extra information to the Missing Plug-in dialog
	that is popped when a document containing this plug-in's data is opened when
	this plug-in is not present. These strings are not translatable strings
	since they must be available when the plug-in isn't around. They get stored
	in any document that this plug-in contributes data to.
*/
resource ExtraPluginInfo(1)
{
	kNCPrefsCompanyValue,			// Company name
	kNCPrefsMissingPluginURLValue,	// URL 
	kNCPrefsMissingPluginAlertValue,	// Missing plug-in alert text
};

/* Boss class definition.
*/
resource ClassDescriptionTable(kSDKDefClassDescriptionTableResourceID)
{{{
	
	/**
	 This boss class supports two interfaces:
	 IActionComponent and IPMPersist.

	 
	 @ingroup newscadpreferences
	*/
	/* NON-UI PLUGINS DON'T HAVE ACTION COMPONENTS! */
// 	Class
// 	{
// 		kNCPrefsActionComponentBoss,
// 		kInvalidClass,
// 		{
// 			/** Handle the actions from the menu. */
// 			IID_IACTIONCOMPONENT, kNCPrefsActionComponentImpl,
// 			/** Persist the state of the menu across application instantiation.
// 			Implementation provided by the API.*/
// 			IID_IPMPERSIST, kPMPersistImpl
// 		}
// 	},

			
	/**
		 This boss class implements the dialog for this plug-in. All
		 dialogs must implement IDialogController. Specialisation of
		 IObserver is only necessary if you want to handle widget
		 changes dynamically rather than just gathering their values
		 and applying in the IDialogController implementation.
		 In this implementation IObserver is specialised so that the
		 plug-in's about box is popped when the info button widget
		 is clicked.

		 
		 @ingroup newscadpreferences
	*/
	Class
	{
		kNCPrefsBoss,
		kInvalidClass,
		{
			IID_INCPREFSINTERFACE, kNCPrefsImpl,
		}
	},
	
	Class
	{
		kNCPrefsDialogBoss,
			kDialogBoss,
		{
			/** Provides management and control over the dialog.
			*/
			IID_IDIALOGCONTROLLER, kNCPrefsDialogControllerImpl,
				/** Allows dynamic processing of dialog changes.
				*/
				IID_IOBSERVER, kNCPrefsDialogObserverImpl,
			}

	},


}}};

/*  Implementation definition.
*/
resource FactoryList (kSDKDefFactoryListResourceID)
{
	kImplementationIDSpace,
	{
		#include "NCPrefsFactoryList.h"
	}
};


// NORMALLY A MENU DEFINITION WOULD GO IN THIS FILE, 
// BUT NON-UI PLUGINS DON'T HAVE MENUS (NO UI!)
// 
// Menu definition COMMENTED OUT.
/*  Menu definition.
*/
// resource MenuDef (kSDKDefMenuResourceID)
// {
// 	{
// 		// The About Plug-ins sub-menu item for this plug-in.
// 		kNCPrefsAboutActionID,			// ActionID (kInvalidActionID for positional entries)
// 		kNCPrefsAboutMenuPath,			// Menu Path.
// 		kSDKDefAlphabeticPosition,			// Menu Position.
// 		kSDKDefIsNotDynamicMenuFlag,		// kSDKDefIsNotDynamicMenuFlag or kSDKDefIsDynamicMenuFlag
// 
// 
// 	// The Plug-ins menu sub-menu items for this plug-in.
// 		kNCPrefsDialogActionID,
// 		kNCPrefsPluginsMenuPath,
// 		kNCPrefsDialogMenuItemPosition,
// 		kSDKDefIsNotDynamicMenuFlag,
// 		
// 
// 	}
// };

// NO Action definition, either.
/* Action definition.
*/
// resource ActionDef (kSDKDefActionResourceID)
// {
// 	{
// 		kNCPrefsActionComponentBoss, 		// ClassID of boss class that implements the ActionID.
// 		kNCPrefsAboutActionID,	// ActionID.
// 		kNCPrefsAboutMenuKey,	// Sub-menu string.
// 		kOtherActionArea,				// Area name (see ActionDefs.h).
// 		kNormalAction,					// Type of action (see ActionDefs.h).
// 		kDisableIfLowMem,				// Enabling type (see ActionDefs.h).
// 		kInvalidInterfaceID,			// Selection InterfaceID this action cares about or kInvalidInterfaceID.
// 		kSDKDefInvisibleInKBSCEditorFlag, // kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.
// 
// 
// 		kNCPrefsActionComponentBoss,
// 		kNCPrefsDialogActionID,		
// 		kNCPrefsDialogMenuItemKey,		
// 		kOtherActionArea,			
// 		kNormalAction,				
// 		kDisableIfLowMem,	
// 		kInvalidInterfaceID,		
// 		kSDKDefVisibleInKBSCEditorFlag,
// 
// 
// 	}
// };


/*  LocaleIndex
	The LocaleIndex should have indicies that point at your
	localizations for each language system that you are localized for.
*/
/*  String LocaleIndex.
*/
resource LocaleIndex ( kSDKDefStringsResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_enUS, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_enGB, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_deDE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_frFR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_esES, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_ptBR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_svSE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_daDK, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nlNL, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_itIT, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_noNO, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_fiFI, kSDKDefStringsResourceID + index_enUS
		kInDesignJapaneseFS, k_jaJP, kSDKDefStringsResourceID + index_jaJP
	}
};

resource LocaleIndex (kSDKDefStringsNoTransResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_Wild, kSDKDefStringsNoTransResourceID + index_enUS
	}
};

resource StringTable (kSDKDefStringsNoTransResourceID + index_enUS)
{
	k_enUS,									// Locale Id
	kEuropeanMacToWinEncodingConverter,		// Character encoding converter
	{
		// No-Translate strings go here:

	}
};



/*  Dialog LocaleIndex.
*/
resource LocaleIndex (kSDKDefDialogResourceID)
{
   kViewRsrcType,
	{
		kWildFS,	k_Wild, kSDKDefDialogResourceID + index_enUS
	}
};

/*  Type definition.
*/
type NCPrefsDialogWidget(kViewRsrcType) : DialogBoss(ClassID = kNCPrefsDialogBoss)
{
};

/*  Dialog definition.
	This view is not localised: therefore, it can reside here.
	However, if you wish to localise it, it is recommended to locate it in one of
	the localised framework resource files (i.e. NCPrefs_enUS.fr etc.) and
	update your Dialog LocaleIndex accordingly.
*/
resource NCPrefsDialogWidget (kSDKDefDialogResourceID + index_enUS)
{
	__FILE__, __LINE__,
	kNCPrefsDialogWidgetID,	// WidgetID
	kPMRsrcID_None,				// RsrcID
	kBindNone,					// Binding
//	0, 0, 388,112,				// Frame (l,t,r,b)
	0, 0, 440, 282,								// Frame (l,t,r,b)
	kTrue, kTrue,				// Visible, Enabled
	kNCPrefsDialogTitleKey,	// Dialog name
	{
	//<FREDDYWIDGETDEFLISTUS>
		DefaultButtonWidget
		(
			kOKButtonWidgetID,		// WidgetID
			kSysButtonPMRsrcId,		// RsrcID
			kBindNone,				// Binding
//			292, 16, 372, 36,		// Frame (l,t,r,b)
			120, 248, 200, 268,					// Frame (l,t,r,b)
			kTrue, kTrue,			// Visible, Enabled
			kSDKDefOKButtonApplicationKey,	// Button text
		),
		CancelButtonWidget
		(
			kCancelButton_WidgetID,	// WidgetID
			kSysButtonPMRsrcId,		// RsrcID
			kBindNone,				// Binding
//			292, 46, 372, 66,		// Frame (l,t,r,b)
			240, 248, 320, 268,					// Frame (l,t,r,b)
			kTrue, kTrue,			// Visible, Enabled
			kSDKDefCancelButtonApplicationKey,	// Button name
			kTrue,					// Change to Reset on option-click.
		),
	//</FREDDYWIDGETDEFLISTUS>
		// StaticText widget resource -- 
		// Label for combo box -- "Rule Weight:"
		StaticTextWidget
		(
			kNCPrefsDropDownLabelWidgetID,		// WidgetId
			kSysStaticTextPMRsrcId,				// RsrcId
			kBindNone,							// Frame binding
			Frame (12, 16, 108, 36 ),			// Frame (l,t,r,b)
			kTrue, kTrue, kAlignRight,			// Visible, Enabled, Alignment
			kDontEllipsize,	kTrue,				// don't add any ellipses
			kPrefsRuleWtDropDownLabelStrKey,	// Text
			kNCPrefsDropDownWidgetID,			// WidgetID for associated 
												// shortcut ctrl
		),

		// Combo box -- "Rule Weight"
		TextComboBoxWidget
		(
			kNCPrefsDropDownWidgetID,		// WidgetId
			kSysDropDownPMRsrcId,					// RsrcId
			kBindNone,								// Frame binding
			Frame (112, 16, 212, 36),				// Frame (l,t,r,b)
			kTrue, kTrue							// Visible, Enabled
			0,										// Widget id of nudge button (0 so we don't get one)
			0, 0,									// small,large nudge amount
			10,										// max num chars( 0 = no limit)
			kFalse,									// is read only
			kFalse,									// range checking enabled
			kFalse,									// blank entry allowed
			0,										// Upper bounds
			0,										// Lower bounds
			0,
			"",										// Initial text
			{{			
				kPrefsDropDownItem_1_Key,
				kPrefsDropDownItem_2_Key,
				kPrefsDropDownItem_3_Key,
				kPrefsDropDownItem_4_Key,
				kPrefsDropDownItem_5_Key,
				kPrefsDropDownItem_6_Key,
				kPrefsDropDownItem_7_Key,
			}}
		),

		// "Gray Ad Outline" checkbox
		CheckBoxWidget
		(
			// CControlView properties
			kNCPrefsGrayAdOutlineCheckBoxWidgetID,	// widget ID
			kSysCheckBoxPMRsrcId,					// PMRsrc ID
			kBindNone,								// frame binding
			Frame (284, 16, 428, 36),				//  left, top, right, bottom
			kTrue,									// visible
			kTrue,									// enabled
			// TriStateControlAttributes properties
			kAlignLeft,								// alignment
			// CTextControlData properties
			kPrefsGrayAdOutlineStrKey,				// control label
		),
		
		// "Current Graphics Folder" UI elements
		//	Field label --"Import graphics from the folder:"
		StaticTextWidget
		(
			kNCPrefsGraphicsFolderLabelWidgetID,	// WidgetId
			kSysStaticTextPMRsrcId,					// RsrcId
			kBindNone,								// Frame binding
			Frame (12, 72, 428, 92 ),				// Frame (l,t,r,b)
			kTrue, kTrue, kAlignLeft,				// Visible, Enabled, Alignment
			kDontEllipsize, kTrue,					// don't add any ellipses
			kPrefsGraphicsFolderLabelStrKey,		// Text
			kNCPrefsChangeFolderEditTextWidgetID,	// WidgetID for associated 
													// shortcut ctrl
		),
		
		// "Browse" for folder button
/*
		ButtonWidget
		(
			// CControlView properties
			kNCPrefsChangeGraphicsFolderBtnWidgetID,	// widget ID
			kSysButtonPMRsrcId,						// PMRsrc ID
			kBindNone,								// frame binding
			Frame (356, 100, 428, 120),				// left, top, right, bottom
			kTrue,									// visible
			kTrue,									// enabled
			// CTextControlData properties
			kChangeGraphicsFolderBtnStrKey,			// control label
		),
*/		
		// Edit Text -- path to graphics folder
		TextEditBoxWidget							// Path to graphics folder
		(
			// CControlView properties
			kNCPrefsChangeFolderEditTextWidgetID,			// widget ID
			kSysEditBoxPMRsrcId,					// PMRsrc ID
			kBindNone, 								// frame binding
			Frame (12, 100, 352, 120),				//  left, top, right, bottom
			kTrue,									// visible
			kTrue,									// enabled

			// CEditBoxAttributes
			0,										// nudgeWidgetId (0 or 
													// kInvalidWidgetID if no 
													// nudge required)
			1.0,									// small nudge amount
			5.0,									// large nudge amount
			0,										// max num chars (0 == no limit)
			kFalse,									// read only flag
			kFalse,									// notify on each key stroke

			// TextDataValidation properties
			kTrue,									// range checking enabled
			kFalse,									// blank entry allowed
			30.0,									// upper limit
			0.0,									// lower limit

			// CTextControlData properties
			"",										// control label
		),
		
		// UI elements for specifying percentage of page real estate 
		// allowed to be covered by ads:
		// Prompt -- new for CS4
		StaticTextWidget
		(
			kNCPrefsAdCoveragePrompt1TextWidgetID,
			kSysStaticTextPMRsrcId,					// RsrcId
			kBindNone,								// Frame binding
			Frame (12, 150, 428, 165 ),				// Frame (l,t,r,b)
			kTrue, kTrue, kAlignLeft,				// Visible, Enabled, Alignment
			kDontEllipsize,	kTrue,					// don't add any ellipses
			kPrefsAdCoveragePrompt1StrKey,			// Text
			kNCPrefsAdCoverageEditTextWidgetID,		// WidgetID for associated 
													// shortcut ctrl
		),
		StaticTextWidget
		(
			kNCPrefsAdCoveragePrompt2TextWidgetID,
			kSysStaticTextPMRsrcId,					// RsrcId
			kBindNone,								// Frame binding
			Frame (12, 165, 428, 185 ),				// Frame (l,t,r,b)
			kTrue, kTrue, kAlignLeft,				// Visible, Enabled, Alignment
			kDontEllipsize,	kTrue,					// don't add any ellipses
			kPrefsAdCoveragePrompt2StrKey,			// Text
			kNCPrefsAdCoverageEditTextWidgetID,		// WidgetID for associated 
													// shortcut ctrl
		),
		
		// Field label -- a StaticText widget resource
		StaticTextWidget							// "Ad Coverage:"
		(
			kNCPrefsAdCoverageLabelWidgetID,		// WidgetId
			kSysStaticTextPMRsrcId,					// RsrcId
			kBindNone,								// Frame binding
			Frame (12, 195, 96, 215 ),				// Frame (l,t,r,b)
			kTrue, kTrue, kAlignLeft,				// Visible, Enabled, Alignment
			kDontEllipsize,	kTrue,					// don't add any ellipses
			kPrefsAdCoverageLabelStrKey,			// Text
			kNCPrefsAdCoverageEditTextWidgetID,		// WidgetID for associated 
													// shortcut ctrl
		),
		
		TextEditBoxWidget							// Ad Coverage Percentage
		(
			// CControlView properties
			kNCPrefsAdCoverageEditTextWidgetID,		// widget ID
			kSysEditBoxPMRsrcId,					// PMRsrc ID
			kBindNone, 								// frame binding
			Frame (100, 195, 135, 215),				//  left, top, right, bottom
			kTrue,									// visible
			kTrue,									// enabled

			// CEditBoxAttributes
			0,										// nudgeWidgetId (0 or 
													// kInvalidWidgetID if no 
													// nudge required)
			1.0,									// small nudge amount
			5.0,									// large nudge amount
			0,										// max num chars (0 == no limit)
			kFalse,									// read only flag
			kFalse,									// notify on each key stroke

			// TextDataValidation properties
			kTrue,									// range checking enabled
			kFalse,									// blank entry allowed
			30.0,									// upper limit
			0.0,									// lower limit

			// CTextControlData properties
			"",										// Default text
		),
		StaticTextWidget							// "%"
		(
			kNCPrefsAdCoveragePercentWidgetID,		// WidgetId
			kSysStaticTextPMRsrcId,					// RsrcId
			kBindNone,								// Frame binding
			Frame (137, 195, 150, 215 ),				// Frame (l,t,r,b)
			kTrue, kTrue, kAlignLeft,				// Visible, Enabled, Alignment
			kDontEllipsize,	kTrue,					// don't add any ellipses
			kPrefsAdCoveragePercentStrKey,			// Text
			kNCPrefsAdCoverageEditTextWidgetID,		// WidgetID for associated 
													// shortcut ctrl
		),
	},
};


#endif // __ODFRC__

#include "NCPrefs_enUS.fr"
#include "NCPrefs_jaJP.fr"

//  Code generated by DollyXs code generator
