/* 	CL_TextFrameManipulator.cpp	Author:				Description:	<describe the CL_TextFrameManipulator class here>*/#include "CL_TextFrameManipulator.h"// Interface includes:#include "ITextColumnData.h"// General includes://#include "TextRange.h"#include "CmdUtils.h"#include "UIDList.h"#include "CL_Log_File.h"#include "global_data.h"InDesignTextFrameOptionsManipulator::InDesignTextFrameOptionsManipulator()	:	graphicFrameUIDRef_(UIDRef::gNull)	,	left_(0.0)	,	top_(0.0)	,	right_(0.0)	,	bottom_(0.0){}InDesignTextFrameOptionsManipulator::~InDesignTextFrameOptionsManipulator(){}/*CL_TextFrameManipulator::CL_TextFrameManipulator (	UIDRef inGraphicFrameUidRef, PMReal inLeft, PMReal inTop, 	PMReal inRight, PMReal  inBottom)	:	graphicFrameUIDRef_(UIDRef::gNull)	,	left_(inLeft)	,	top_(inTop)	,	right_(inRight)	,	bottom_(inBottom){}ErrorCode CL_TextFrameManipulator::Apply_() const{	return kFailure;}*/ErrorCode InDesignTextFrameOptionsManipulator::SetAndApply_(	UIDRef& inGraphicFrameUidRef, 	PMReal inLeft, PMReal inTop, 	PMReal inRight, PMReal inBottom){	LOG_BEGIN_FUNCTION;	left_ = inLeft;	top_ = inTop;	right_ = inRight;	bottom_ = inBottom;		ErrorCode errcod = kFailure;	PMRect rectInset (left_, top_, right_, bottom_);	// Create kSetTextInsetCmdBoss.	InterfacePtr<ICommand> setTextInsetCmd (								CmdUtils::CreateCommand (kSetTextInsetCmdBoss) );	if (setTextInsetCmd == nil) {		LOG ("Could not create setTextInsetCmd.");		LOG_END_FUNCTION;		return errcod;	}	InterfacePtr<ITextInset> textInsetCmdData (setTextInsetCmd, UseDefaultIID());	if (!textInsetCmdData) {		LOG ("Could not create setTextInsetCmdData.");		LOG_END_FUNCTION;		return errcod;	}	textInsetCmdData->SetInset(rectInset.Top());	textInsetCmdData->SetRectInset(rectInset);LOG ("LINE 72");	// Process the command.//	UIDRef frameUidRef = graphicFrameUIDRef_;	UIDList itemList (inGraphicFrameUidRef);	setTextInsetCmd->SetItemList (itemList);	errcod = CmdUtils::ProcessCommand (setTextInsetCmd);	if (errcod != kSuccess)	{		LOG ("kSetTextInsetCmdBoss failed");		LOG_END_FUNCTION;		return errcod;	}LOG ("LINE 84");	// Force recalculation of column widths based on changed text inset values	// by processing kChangeNumberOfColumnsCmdBoss.	InterfacePtr<ICommand> changeNumberOfColumnsCmd (					CmdUtils::CreateCommand (kChangeNumberOfColumnsCmdBoss) );	if (!changeNumberOfColumnsCmd)	{		LOG ("Could not create changeNumberOfColumnsCmd.");		LOG_END_FUNCTION;		return errcod;	}LOG ("LINE 95");	InterfacePtr<ITextColumnData> cmdColumnData (									changeNumberOfColumnsCmd, UseDefaultIID());	if (cmdColumnData == nil)	{		LOG ("Could not create cmdColumnData.");		LOG_END_FUNCTION;		return errcod;	}LOG ("LINE 104");		cmdColumnData->SetNumberOfColumns (-1);					// leave as is	cmdColumnData->SetGutterWidth (-1);						// leave as is	cmdColumnData->UseFixedColumnSizing (-1);				// leave as is	cmdColumnData->SetFixedWidth (-1);						// leave as is	changeNumberOfColumnsCmd->SetItemList (itemList);	errcod = CmdUtils::ProcessCommand (changeNumberOfColumnsCmd);	if (errcod != kSuccess)	{		LOG ("kChangeNumberOfColumnsCmdBoss failed");		LOG_END_FUNCTION;		return errcod;	}	LOG_END_FUNCTION;	return errcod;}