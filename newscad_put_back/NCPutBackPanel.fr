//========================================================================================
//  
//  $File: $
//  
//  Owner: Ross L. Edgar
//  
//  $Author: $
//  
//  $DateTime: $
//  
//  $Revision: $
//  
//  $Change: $
//  
//  Copyright 1997-2005 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"
/*
// General includes:
#include "MenuDef.fh"
#include "ActionDef.fh"
#include "ActionDefs.h"
#include "AdobeMenuPositions.h"
#include "LocaleIndex.h"
#include "PMLocaleIds.h"
#include "StringTable.fh"
#include "ObjectModelTypes.fh"
#include "ShuksanID.h"
#include "ActionID.h"
#include "CommandID.h"
#include "WorkspaceID.h"
#include "WidgetID.h"
#include "BuildNumber.h"
#include "PanelList.fh"

#include "InterfaceColorDefines.h"
#include "IControlViewDefs.h"
#include "SysControlIDs.h"
#include "Widgets.fh"	// for PalettePanelWidget or DialogBoss
*/
#include "MenuDef.fh"
#include "ActionDef.fh"
#include "ActionDefs.h"
#include "AdobeMenuPositions.h"
#include "LocaleIndex.h"
#include "PMLocaleIds.h"
#include "StringTable.fh"
//#include "OMTypes.h"
#include "ObjectModelTypes.fh"
#include "ShuksanID.h"
#include "ActionID.h"
#include "CommandID.h"
#include "WorkspaceID.h"
#include "WidgetID.h"
#include "BuildNumber.h"
#include "PanelList.fh"
#include "Widgets.fh"	// for PalettePanelWidget
#include "InterfaceColorDefines.h"
#include "IControlViewDefs.h"
#include "SysControlIDs.h"

// General includes:
#include "GenericID.h"
#include "TextID.h"
#include "TextEditorID.h" // for kTextSelectionBoss
#include "ErrorTableTypes.h" // for UserErrorTable
#include "ScriptInfoTypes.fh"
#include "ScriptingID.h"
#include "AppFrameworkID.h" // for kApplicationObjectScriptElement
#include "DocFrameworkID.h" // for kDocumentObjectScriptElement
#include "TextScriptID.h" // for kTextFrameObjectScriptElement


// Project includes:
#include "NCPutBackPanelID.h"


#ifdef __ODFRC__

/*  Plugin version definition.
*/
resource PluginVersion (kSDKDefPluginVersionResourceID)
{
	kTargetVersion,
	kNCPutBackPanelPluginID,
	kSDKDefPlugInMajorVersionNumber, kSDKDefPlugInMinorVersionNumber,
	kSDKDefHostMajorVersionNumber, kSDKDefHostMinorVersionNumber,
	kNCPutBackPanelCurrentMajorFormatNumber, kNCPutBackPanelCurrentMinorFormatNumber,
	{ kInDesignProduct, kInCopyProduct },
	{ kWildFS },
	kNCPutBackPanelVersion
};

/*  The ExtraPluginInfo resource adds extra information to the Missing Plug-in dialog
	that is popped when a document containing this plug-in's data is opened when
	this plug-in is not present. These strings are not translatable strings
	since they must be available when the plug-in isn't around. They get stored
	in any document that this plug-in contributes data to.
*/
resource ExtraPluginInfo(1)
{
	kNCPutBackPanelCompanyValue,			// Company name
	kNCPutBackPanelMissingPluginURLValue,	// URL 
	kNCPutBackPanelMissingPluginAlertValue,	// Missing plug-in alert text
};

/* Boss class definition.
*/
resource ClassDescriptionTable(kSDKDefClassDescriptionTableResourceID)
{{{
	
	AddIn
	{
		kIntegratorSuiteBoss,
		kInvalidClass,
		{
			IID_NCSELSUITE, kNCSelectionSuiteASBImpl,
		}
	},

	AddIn
	{
		kLayoutSuiteBoss,
	        kInvalidClass,
	        {	
			IID_NCSELSUITE, kNCSelectionSuiteCSBImpl,
		}
	},

	/**
	 This boss class supports two interfaces:
	 IActionComponent and IPMPersist.

	 
	 @ingroup newscad_putback_ui
	*/
	Class
	{
		kNCPutBackPanelActionComponentBoss,
		kInvalidClass,
		{
			/** Handle the actions from the menu. */
			IID_IACTIONCOMPONENT, kNCPutBackPanelActionComponentImpl,
			/** Persist the state of the menu across application instantiation.
			Implementation provided by the API.*/
			IID_IPMPERSIST, kPMPersistImpl
		}
	},

	/**
		 This boss class inherits from an API panel boss class, and
		 adds an interface to control a pop-up menu on the panel.
		 The implementation for this interface is provided by the API.

		 
		 @ingroup newscad_putback_ui
	*/

	Class
	{
		kNCPutBackPanelPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			/** The plug-in's implementation of ITextControlData with an exotic 
				IID of IID_IPANELMENUDATA.
				Implementation provided by the API.
			*/
			IID_IPANELMENUDATA,	kCPanelMenuDataImpl,
			
			/*
				Selection observer -- see declaration and implementation 
				in NCSelectionObserver.cpp
			*/
			IID_IOBSERVER,		kNCPutBackSelectionObserverImpl,
		}
	},

}}};

/*  Implementation definition.
*/
resource FactoryList (kSDKDefFactoryListResourceID)
{
	kImplementationIDSpace,
	{
		#include "NCPutBackPanelFactoryList.h"
	}
};


/*  Menu definition.
*/
resource MenuDef (kSDKDefMenuResourceID)
{
	{
		// The About Plug-ins sub-menu item for this plug-in.
		kNCPutBackPanelAboutActionID,			// ActionID (kInvalidActionID for positional entries)
		kNCPutBackPanelAboutMenuPath,			// Menu Path.
		kSDKDefAlphabeticPosition,			// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,		// kSDKDefIsNotDynamicMenuFlag or kSDKDefIsDynamicMenuFlag


		// Separator for the popup menu on the panel
		kNCPutBackPanelSeparator1ActionID,
		kNCPutBackPanelInternalPopupMenuNameKey kSDKDefDelimiterAndSeparatorPath,	// :- to mark an item as a separator.
		kNCPutBackPanelSeparator1MenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		// About this plugin submenu for the popup menu on the panel
		kNCPutBackPanelPopupAboutThisActionID,
		kNCPutBackPanelTargetMenuPath
		kNCPutBackPanelAboutThisMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,


	}
};

/* Action definition.
*/
resource ActionDef (kSDKDefActionResourceID)
{
	{
		kNCPutBackPanelActionComponentBoss, 		// ClassID of boss class that implements the ActionID.
		kNCPutBackPanelAboutActionID,	// ActionID.
		kNCPutBackPanelAboutMenuKey,	// Sub-menu string.
		kOtherActionArea,				// Area name (see ActionDefs.h).
		kNormalAction,					// Type of action (see ActionDefs.h).
		kDisableIfLowMem,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,			// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag, // kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.


		kNCPutBackPanelActionComponentBoss,
		kNCPutBackPanelPopupAboutThisActionID,
		kSDKDefAboutThisPlugInMenuKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,
		kDisableIfLowMem,
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,



	}
};


/*  LocaleIndex
	The LocaleIndex should have indicies that point at your
	localizations for each language system that you are localized for.
*/
/*  String LocaleIndex.
*/
resource LocaleIndex ( kSDKDefStringsResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_enUS, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_enGB, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_deDE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_frFR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_esES, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_ptBR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_svSE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_daDK, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nlNL, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_itIT, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_noNO, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_fiFI, kSDKDefStringsResourceID + index_enUS
		kInDesignJapaneseFS, k_jaJP, kSDKDefStringsResourceID + index_jaJP
	}
};

resource LocaleIndex (kSDKDefStringsNoTransResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_Wild, kSDKDefStringsNoTransResourceID + index_enUS
	}
};

resource StringTable (kSDKDefStringsNoTransResourceID + index_enUS)
{
	k_enUS,									// Locale Id
	kEuropeanMacToWinEncodingConverter,		// Character encoding converter
	{
		// No-Translate strings go here:

		kNCPutBackPanelInternalPopupMenuNameKey,	kNCPutBackPanelInternalPopupMenuNameKey,		// No need to translate, internal menu name.

	}
};




/*  Panel LocaleIndex.
*/
resource LocaleIndex (kSDKDefPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kSDKDefPanelResourceID + index_enUS
	}
};


/*  Type definition.
*/
type NCPutBackPanelPanelWidget(kViewRsrcType) : PalettePanelWidget(ClassID = kNCPutBackPanelPanelWidgetBoss)
{
	CPanelMenuData;
};

/*  PanelList definition.
*/
resource PanelList (kSDKDefPanelResourceID)
{
//	kSDKDefDefaultPaletteID,		// Palette number for default placement
//	initiallyVisible,				// Initial visible flag (initiallyHidden/initiallyVisible)
	{
		kSDKDefPanelResourceID,		// Resource ID for this panel (use SDK default rsrc ID)
		kNCPutBackPanelPluginID,			// ID of plug-in that owns this panel
		kNotResizable
		kNCPutBackPanelPanelWidgetActionID,	// Action ID to show/hide the panel
		kNCPutBackPanelPanelTitleKey,	// Shows up in the Window list.
		"",							// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,						// Alternate Menu position Alternate Menu position for determining menu order
		0,0,						// Rsrc ID, Plugin ID for a PNG icon resource to use for this palette
		c_Panel
	}
};

/*  PanelView definition.
	The view is not currently localised: therefore, it can reside here.
	However, if you wish to localise it, it is recommended to locate it in one of
	the localised framework resource files (i.e. NCPutBackPanel_enUS.fr etc.).
*/
resource NCPutBackPanelPanelWidget(kSDKDefPanelResourceID + index_enUS)
{
	__FILE__, __LINE__,					// Localization macro
	kNCPutBackPanelPanelWidgetID,		// WidgetID
	kPMRsrcID_None,						// RsrcID
	kBindNone,							// Binding (0=none)
	0, 0, 400, 165,						// Frame: left, top, right, bottom.
	kTrue, kTrue,						// Visible, Enabled
	kFalse,								// Erase background
	kInterfacePaletteFill,				// Erase to color
	kFalse,								// Draw dropshadow
	kNCPutBackPanelPanelTitleKey,			// Panel name
	{
		DefaultButtonWidget					// "Put Back"
		(
			kOKButtonWidgetID,				// WidgetID
			kSysButtonPMRsrcId,				// RsrcID
			kBindNone,						// Binding
			150, 125, 250, 145,				// Frame (l,t,r,b)
			kTrue, kTrue,					// Visible, Enabled
			kPutBackButtonKey,				// Button text
		),
		StaticTextWidget					// LABEL:  "Client:"
		(
			0,								// WidgetId (default=0)
			kSysStaticTextPMRsrcId,			// RsrcId
			kBindNone,						// Frame binding
			10, 10, 160, 25,				// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd,		// Alignment, ellipsize style
			kTrue,							// convert ampersands
			"Client: ",						// Initial text.
			0								// No associated widget
		),
		StaticTextWidget
		(
			kStaticTextWidgetID_Client		// WidgetID (NCPutBackPanelID.h)
			kSysStaticTextPMRsrcId			// RsrcID
			kBindNone,						// Frame binding
			84, 10, 390, 25,				// Frame: left, top, right, bottom
			kTrue,							// Visible
			kTrue,							// Enabled (as in, not grayed out)
			kAlignLeft,						// Text alignment
			kEllipsizeEnd,					// If ellipsized, where?
			kTrue,							// convert ampersands
			"",								// Initial text
			0								// No associated widget
		),
		StaticTextWidget					// LABEL:  "File Name:"
		(
			0,								// WidgetId (default=0)
			kSysStaticTextPMRsrcId,			// RsrcId
			kBindNone,						// Frame binding
			10, 27, 390, 42,				// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd		// Alignment, ellipsize style
			kTrue,							// convert ampersands
			"File Name: ",					// Initial text.
			0								// No associated widget
		),
		StaticTextWidget
		(
			kStaticTextWidgetID_FileName,	// WidgetID (NCPutBackPanelID.h)
			kSysStaticTextPMRsrcId,			// RsrcID
			kBindNone,						// Frame binding
			84, 27, 390, 42,				// Frame: left, top, right, bottom
			kTrue,							// Visible
			kTrue,							// Enabled (as in, not grayed out)
			kAlignLeft,						// Text alignment
			kEllipsizeEnd,					// If ellipsized, where?
			kTrue,							// convert ampersands
			"",								// Initial text
			0								// No associated widget
		),
		StaticTextWidget					// LABEL:  "Sales Rep:"
		(
			0,								// WidgetId (default=0)
			kSysStaticTextPMRsrcId,			// RsrcId
			kBindNone,						// Frame binding
			10, 44, 80, 59,					// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd		// Alignment, ellipsize style
			kTrue,							// convert ampersands
			"Sales Rep: ",					// Initial text.
			0								// No associated widget
		),
		StaticTextWidget
		(
			kStaticTextWidgetID_SalesRep,	// WidgetID (NCPutBackPanelID.h)
			kSysStaticTextPMRsrcId,			// RsrcID
			kBindNone,						// Frame binding
			84, 44, 390, 59,				// Frame: left, top, right, bottom
			kTrue,							// Visible
			kTrue,							// Enabled (as in, not grayed out)
			kAlignLeft,						// Text alignment
			kEllipsizeEnd,					// If ellipsized, where?
			kTrue,							// convert ampersands
			"",								// Initial text
			0								// No associated widget
		),
		StaticTextWidget					// LABEL:  "Ad Size:"
		(
			0,								// WidgetId (default=0)
			kSysStaticTextPMRsrcId,			// RsrcId
			kBindNone,						// Frame binding
			10, 61, 390, 76,				// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd		// Alignment, ellipsize style
			kTrue,							// convert ampersands
			"Ad Size: ",					// Initial text.
			0								// No associated widget
		),
		StaticTextWidget
		(
			kStaticTextWidgetID_AdSize,							// WidgetID (NCPutBackPanelID.h)
			kSysStaticTextPMRsrcId,			// RsrcID
			kBindNone,						// Frame binding
			84, 61, 390, 76,				// Frame: left, top, right, bottom
			kTrue,							// Visible
			kTrue,							// Enabled (as in, not grayed out)
			kAlignLeft,						// Text alignment
			kEllipsizeEnd,					// If ellipsized, where?
			kTrue,							// convert ampersands
			"",								// Initial text
			0								// No associated widget
		),
		StaticTextWidget					// LABEL:  "Start x:"
		(
			0,								// WidgetId (default=0)
			kSysStaticTextPMRsrcId,			// RsrcId
			kBindNone,						// Frame binding
			10, 78, 390, 93,				// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd		// Alignment, ellipsize style
			kTrue,							// convert ampersands
			"Start x: ",					// Initial text.
			0								// No associated widget
		),
		StaticTextWidget
		(
			kStaticTextWidgetID_StartX,							// WidgetID (NCPutBackPanelID.h)
			kSysStaticTextPMRsrcId,			// RsrcID
			kBindNone,						// Frame binding
			84, 78, 390, 93,				// Frame: left, top, right, bottom
			kTrue,							// Visible
			kTrue,							// Enabled (as in, not grayed out)
			kAlignLeft,						// Text alignment
			kEllipsizeEnd,					// If ellipsized, where?
			kTrue,							// convert ampersands
			"X POSITION NOT WORKING YET",	// Initial text
			0								// No associated widget
		),
		StaticTextWidget					// LABEL:  "Start y:"
		(
			0,								// WidgetId (default=0)
			kSysStaticTextPMRsrcId,			// RsrcId
			kBindNone,						// Frame binding
			10, 95, 390, 110,				// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd		// Alignment, ellipsize style
			kTrue,							// convert ampersands
			"Start y: ",					// Initial text.
			0								// No associated widget
		),
		StaticTextWidget
		(
			kStaticTextWidgetID_StartY,							// WidgetID (NCPutBackPanelID.h)
			kSysStaticTextPMRsrcId,			// RsrcID
			kBindNone,						// Frame binding
			84, 95, 390, 110,				// Frame: left, top, right, bottom
			kTrue,							// Visible
			kTrue,							// Enabled (as in, not grayed out)
			kAlignLeft,						// Text alignment
			kEllipsizeEnd,					// If ellipsized, where?
			kTrue,							// convert ampersands
			"Y POSITION NOT WORKING YET",	// Initial text
			0								// No associated widget
		),
	}

	kNCPutBackPanelInternalPopupMenuNameKey		// Popup menu name (internal)
};

#endif // __ODFRC__

#include "NCPutBackPanel_enUS.fr"
#include "NCPutBackPanel_jaJP.fr"

//  Code generated by DollyXs code generator
