//========================================================================================
//  
//  $File: $
//  
//  Owner: Ross Edgar
//  
//  $Author: $
//  
//  $DateTime: $
//  
//  $Revision: $
//  
//  $Change: $
//  
//  Copyright 1997-2008 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"

// Interface includes:
#include "ISession.h"
#include "IApplication.h"
#include "IDialogMgr.h"
#include "IDialog.h"

// Dialog-specific resource includes:
#include "CoreResTypes.h"
#include "LocaleSetting.h"
#include "RsrcSpec.h"

// General includes:
#include "CActionComponent.h"
#include "CAlert.h"
#include "PMString.h"

// Project includes:
#include "NC_ID.h"

// Includes needed for the non-UI plugins that actually do the work.
#include "IAbstractAd.h"
#include "CrAdID.h"
#include "IAbstractGeometryImporter.h"
#include "ImportGeomID.h"
#include "IAbstractArtImporter.h"
#include "ImportArtID.h"
#include "IAbstractContinuedLineTypesetter.h"
#include "TypesetContinuedLinesID.h"
#include "IAbstractAdReportWriter.h"
#include "WriteAdReportID.h"
#include "IAbstractPrefsHandler.h"
#include "NCPrefsID.h"

/** Implements IActionComponent; performs the actions that are executed when the plug-in's
	menu items are selected.

	
	@ingroup newscad

*/
class NC_ActionComponent : public CActionComponent
{
public:
/**
 Constructor.
 @param boss interface ptr from boss object on which this interface is aggregated.
 */
		NC_ActionComponent(IPMUnknown* boss);

		/** The action component should perform the requested action.
			This is where the menu item's action is taken.
			When a menu item is selected, the Menu Manager determines
			which plug-in is responsible for it, and calls its DoAction
			with the ID for the menu item chosen.

			@param actionID identifies the menu item that was selected.
			@param ac active context
			@param mousePoint contains the global mouse location at time of event causing action (e.g. context menus). kInvalidMousePoint if not relevant.
			@param widget contains the widget that invoked this action. May be nil. 
			*/
		virtual void DoAction(IActiveContext* ac, ActionID actionID, GSysPoint mousePoint, IPMUnknown* widget);

	private:
		/** Encapsulates functionality for the about menu item. */
		void DoAbout();
		
		void ImportAdGeometry_();
		
		void ImportArtFiles_();
		
		void CreateAdOnTheFly_();
		
		void TypesetContinuedLines_();
		
		void WriteAdReport_();
		
		void DoPreferences_();
};

/* CREATE_PMINTERFACE
 Binds the C++ implementation class onto its
 ImplementationID making the C++ code callable by the
 application.
*/
CREATE_PMINTERFACE(NC_ActionComponent, kNC_ActionComponentImpl)

/* NC_ActionComponent Constructor
*/
NC_ActionComponent::NC_ActionComponent(IPMUnknown* boss)
: CActionComponent(boss)
{
}

/* DoAction
*/
void NC_ActionComponent::DoAction(IActiveContext* ac, ActionID actionID, 
									GSysPoint mousePoint, IPMUnknown* widget)
{
	switch (actionID.Get())
	{

		case kNC_AboutActionID:
		{
			this->DoAbout();
			break;
		}
					
		case kNC_ImportAdGeometry_ActionID:
			ImportAdGeometry_();
			break;

		case kNC_ImportArtFiles_ActionID:
			ImportArtFiles_();
			break;
		
		case kNC_ContinuedLines_ActionID:
			TypesetContinuedLines_();
			break;

		case kNC_CreateAdOnTheFly_ActionID:
			CreateAdOnTheFly_();
			break;
		
		case kNC_CreateAdReport_ActionID:
			WriteAdReport_();
			break;
		
		case kNC_Preferences_ActionID:
			DoPreferences_();
			break;
			
		default:
		{
			break;
		}
	}
}

/* DoAbout
*/
void NC_ActionComponent::DoAbout()
{
	CAlert::ModalAlert
	(
		kNC_AboutBoxStringKey,				// Alert string
		kOKString, 						// OK button
		kNullString, 						// No second button
		kNullString, 						// No third button
		1,							// Set OK button to default
		CAlert::eInformationIcon				// Information icon.
	);
}
//  End of Code generated by DollyXs code generator

/* ----------------------------- ImportAdGeometry_ ------------------------------ */
void NC_ActionComponent::ImportAdGeometry_()
{
	PMString alertStr;
	alertStr = "NC_ActionComponent::ImportAdGeometry_() called to respond to a ";
	alertStr += "menu selection in the main plugin. This in turn calls into the ";
	alertStr += "ImportAdGeometry plugin, which is the one that's running now.";
#if 0
	CAlert::ModalAlert
	(
		alertStr,				// Alert string
		kOKString, 						// OK button
		kNullString, 						// No second button
		kNullString, 						// No third button
		1,							// Set OK button to default
		CAlert::eInformationIcon				// Information icon.
	);
#endif
	InterfacePtr<IAbstractGeometryImporter> geometryImporterObj (
				CreateObject2<IAbstractGeometryImporter>(kImportGeomBoss));
	if ( geometryImporterObj )
	{
		geometryImporterObj->ImportAdGeometry_(alertStr);
	}

}


/* ------------------------------ ImportArtFiles_ ------------------------------- */
void NC_ActionComponent::ImportArtFiles_()
{
	InterfacePtr<IAbstractArtImporter> artFilesImporterObj (
				CreateObject2<IAbstractArtImporter>(kImportArtBoss));
	if ( artFilesImporterObj )
	{
		artFilesImporterObj->ImportArtFiles_();
	}
}


/* --------------------------- TypesetContinuedLines_ --------------------------- */

void NC_ActionComponent::TypesetContinuedLines_()
{
	InterfacePtr<IAbstractContinuedLineTypesetter> continuedLinesTypesetterObj (
		CreateObject2<IAbstractContinuedLineTypesetter>(kTypesetContinuedLinesBoss));
	if ( continuedLinesTypesetterObj )
	{
// 		CAlert::ModalAlert
// 		(
// 			"Created IAbstractContinuedLineTypesetter",				// Alert string
// 			kOKString, 						// OK button
// 			kNullString, 						// No second button
// 			kNullString, 						// No third button
// 			1,							// Set OK button to default
// 			CAlert::eInformationIcon				// Information icon.
// 		);
// 		
		continuedLinesTypesetterObj->TypesetContinuedLines_();
	}
	else
	{
		CAlert::ModalAlert
		(
			// Alert string
			"NewsCAD: Failed to create IAbstractContinuedLineTypesetter.  Cannot typeset continued lines.",
			kOKString, 						// OK button
			kNullString, 						// No second button
			kNullString, 						// No third button
			1,							// Set OK button to default
			CAlert::eErrorIcon				// Error icon.
		);
	}
}


/* --------------------------- WriteAdReport_ --------------------------- */

void NC_ActionComponent::WriteAdReport_()
{
	InterfacePtr<IAbstractAdReportWriter> adReportWriterObj (
		CreateObject2<IAbstractAdReportWriter>(kWriteAdReportBoss));
	if ( adReportWriterObj )
	{
// 		CAlert::ModalAlert
// 		(
// 			"Created IAbstractAdReportWriter",				// Alert string
// 			kOKString, 						// OK button
// 			kNullString, 						// No second button
// 			kNullString, 						// No third button
// 			1,							// Set OK button to default
// 			CAlert::eInformationIcon				// Information icon.
// 		);
// 
		adReportWriterObj->WriteAdReport_();
	}
	else
	{
		CAlert::ModalAlert
		(
			// Alert string
			"NewsCAD: Failed to create IAbstractAdReportWriter.  Cannot write ad report.",
			kOKString, 						// OK button
			kNullString, 						// No second button
			kNullString, 						// No third button
			1,							// Set OK button to default
			CAlert::eErrorIcon				// Error icon.
		);
	}
}


/* ----------------------------- CreateAdOnTheFly_ ------------------------------ */
/*
void NC_ActionComponent::CreateAdOnTheFly_()
{
	PMString alertStr;
	alertStr = "NC_ActionComponent::CreateAdOnTheFly_() called.  When functional, the ";
	alertStr += "program will put up a dialog for the user to specify ad parameters. ";
	alertStr += "It will call the CreateAd plugin with those parameters.";
	CAlert::ModalAlert
	(
		alertStr,				// Alert string
		kOKString, 						// OK button
		kNullString, 						// No second button
		kNullString, 						// No third button
		1,							// Set OK button to default
		CAlert::eInformationIcon				// Information icon.
	);
	
	// Here is where we open the dialog.  Although the program returns here 
	// eventually, the OK button is handled by another method in another 
	// class, the dialog controller's ApplyDialogFields().  This is in 
	// CreateAdOnTheFly_DialogController.cpp.
	InterfacePtr<IAbstractAd> createAdObj (
				CreateObject2<IAbstractAd>(kCrAdBoss));
	if ( createAdObj )
	{
		PMString pmstr = "Create Ad On The Fly Plugin called with parameter string passed in.";
		createAdObj->Make_(pmstr);
	}

}
*/
void NC_ActionComponent::CreateAdOnTheFly_()
{
	do
	{
		// Get the application interface and the DialogMgr.	
		InterfacePtr<IApplication> application (
								GetExecutionContextSession()->QueryApplication());
		ASSERT(application);
		if (application == nil) {	
			break;
		}
		InterfacePtr<IDialogMgr> dialogMgr(application, UseDefaultIID());
		ASSERT(dialogMgr);
		if (dialogMgr == nil) {
			break;
		}

		// Load the plug-in's resource.
		PMLocaleId nLocale = LocaleSetting::GetLocale();
		RsrcSpec dialogSpec
		(
			nLocale,					// Locale index from PMLocaleIDs.h. 
			kNC_PluginID,			// Our Plug-in ID  
			kViewRsrcType,				// This is the kViewRsrcType.
			kSDKDefDialogResourceID,	// Resource ID for our dialog.
			kTrue						// Initially visible.
		);

		// CreateNewDialog takes the dialogSpec created above, and also
		// the type of dialog being created (kMovableModal).
		IDialog* dialog = dialogMgr->CreateNewDialog (dialogSpec, 
												IDialog::kMovableModal);
		ASSERT(dialog);
		if (dialog == nil) {
			break;
		}

		// Here is where we open the dialog.  The Open() method that's called 
		// here is in Adobe's code.  Although the program returns here 
		// eventually, the OK button is handled by another method in another 
		// class, the dialog controller's ApplyDialogFields().  This is in 
		// CreateAdOnTheFly_DialogController.cpp.
		dialog->Open(); 
	
	} while (false);			
}


/* ------------------------------- DoPreferences_ ------------------------------- */
void NC_ActionComponent::DoPreferences_()
{
	InterfacePtr<IAbstractPrefsHandler> prefsHandlerObj (
					CreateObject2<IAbstractPrefsHandler>(kNCPrefsBoss));
	if ( prefsHandlerObj )
	{
// 		CAlert::ModalAlert
// 		(
// 			"Created prefsHandlerObj",				// Alert string
// 			kOKString, 						// OK button
// 			kNullString, 						// No second button
// 			kNullString, 						// No third button
// 			1,							// Set OK button to default
// 			CAlert::eInformationIcon				// Information icon.
// 		);
// 		
		prefsHandlerObj->DoPreferences_();
	}
	else
	{
		CAlert::ModalAlert
		(
			// Alert string
			"NewsCAD: Failed to create IAbstractPrefsHandler.  Cannot work with preferences.",
			kOKString, 						// OK button
			kNullString, 						// No second button
			kNullString, 						// No third button
			1,							// Set OK button to default
			CAlert::eErrorIcon				// Error icon.
		);
	}
}


// END OF FILE