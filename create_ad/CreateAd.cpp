#include "VCPlugInHeaders.h"#include "IAbstractAd.h"#include "CAlert.h"#include "CrAdID.h"#include "Basic_Display_Ad.h"#include "Basic_Page.h"#include <string>using namespace std;class CL_CreateAd : public CPMUnknown<IAbstractAd>{	public:		CL_CreateAd(IPMUnknown* boss) : CPMUnknown<IAbstractAd>(boss) {}		virtual void	Make_(PMString& inStr);						// Make a basic NewsCAD ad};CREATE_PMINTERFACE (CL_CreateAd, kCrAdImpl)void CL_CreateAd::Make_(PMString& inStr){	TRACE("CL_CreateAd::Make_(PMString& inStr)\n");/* TEST CODE		CAlert::ModalAlert	(//		kTstNoMnuAboutBoxStringKey,				// Alert string//		"You finally called your own code in the newest plugin!  Make_().",		inStr,		kOKString, 						// OK button		kNullString, 						// No second button		kNullString, 						// No third button		1,							// Set OK button to default		CAlert::eInformationIcon				// Information icon.	);*/	const char* pCstr = inStr.GrabCString ();	// TBD: previous line should probably be (porting change):	// inStr.GetPlatformString().c_str());	string adRec = pCstr;	try {		// Realize the ad// 		PlaceAdPanelDisplayAd* pAd = new PlaceAdPanelDisplayAd (adRec);		Basic_Display_Ad* pAd = new Basic_Display_Ad (adRec);		// The ad gets pasted up on the current page, so instantiate a new 		// page object and set it up for ad placement.		auto_ptr<Basic_Page> curPage ( new Basic_Page );		curPage->ComputeCurrentPageUID_();						// Also sets UIDRef		curPage->ComputeAndStorePageMeasurements_();		// We now know enough about the page to convert our ad's 		// width in columns to a width expressed in points.		pAd->ComputeWidth_(curPage->ColumnWidth_(), curPage->GutterWidth_());		// Now we have enough information to paste up the ad (this).  Note 		// that Basic_Page's PasteUp_ can throw.		curPage->PasteUp_(pAd);		// Return memory to free store		delete pAd;	}	catch (PMString exceptionString) {		CAlert::ErrorAlert (exceptionString);	}	}